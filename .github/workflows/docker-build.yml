name: Build, Test, and Release Docker Image

on:
  push:
    branches:
      - master
      - develop
      - 'release/**'
      - 'hotfix/**'
      - 'feature/**'
  pull_request:
    branches:
      - master
      - develop
      - 'release/**'
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Determine semantic version and release type
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      changelog: ${{ steps.version.outputs.changelog }}
      should_release: ${{ steps.version.outputs.should_release }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github conventional-changelog-conventionalcommits

      - name: Configure semantic-release
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": [
              "master",
              {
                "name": "develop",
                "prerelease": "beta"
              },
              {
                "name": "release/**",
                "prerelease": "rc"
              }
            ],
            "plugins": [
              [
                "@semantic-release/commit-analyzer",
                {
                  "preset": "conventionalcommits",
                  "releaseRules": [
                    {"type": "feat", "release": "minor"},
                    {"type": "fix", "release": "patch"},
                    {"type": "perf", "release": "patch"},
                    {"type": "revert", "release": "patch"},
                    {"type": "docs", "release": false},
                    {"type": "style", "release": false},
                    {"type": "chore", "release": false},
                    {"type": "refactor", "release": "patch"},
                    {"type": "test", "release": false},
                    {"type": "build", "release": "patch"},
                    {"type": "ci", "release": false},
                    {"breaking": true, "release": "major"}
                  ]
                }
              ],
              [
                "@semantic-release/release-notes-generator",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/changelog",
                {
                  "changelogFile": "CHANGELOG.md"
                }
              ],
              [
                "@semantic-release/git",
                {
                  "assets": ["CHANGELOG.md"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ],
              "@semantic-release/github"
            ]
          }
          EOF

      - name: Dry run semantic-release
        if: github.event_name == 'pull_request' || github.ref != 'refs/heads/master'
        run: semantic-release --dry-run
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version info
        id: version
        run: |
          if [ "${{ github.ref }}" = "refs/heads/master" ] && [ "${{ github.event_name }}" = "push" ]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
            # Get next version from semantic-release
            NEXT_VERSION=$(semantic-release --dry-run 2>/dev/null | grep -oP 'The next release version is \K[^\s]+' || echo "")
            if [ -z "$NEXT_VERSION" ]; then
              echo "version=latest" >> $GITHUB_OUTPUT
              echo "tag=latest" >> $GITHUB_OUTPUT
            else
              echo "version=${NEXT_VERSION}" >> $GITHUB_OUTPUT
              echo "tag=v${NEXT_VERSION}" >> $GITHUB_OUTPUT
            fi
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
            # Generate version based on branch
            BRANCH_NAME=${GITHUB_REF#refs/heads/}
            BRANCH_NAME=${BRANCH_NAME//\//-}
            SHORT_SHA=${GITHUB_SHA:0:7}
            echo "version=${BRANCH_NAME}-${SHORT_SHA}" >> $GITHUB_OUTPUT
            echo "tag=${BRANCH_NAME}-${SHORT_SHA}" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Security scanning
  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Build and test Docker image
  build-and-test:
    runs-on: ubuntu-latest
    needs: [version, security]
    permissions:
      contents: read
      packages: write
      security-events: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=false
          tags: |
            # Branch-based tagging for all branches
            type=ref,event=branch,suffix=-{{sha}}
            type=ref,event=pr,suffix=-{{sha}}
            # Semantic versioning tags (only for releases)
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            # Latest tag for master branch
            type=raw,value=latest,enable={{is_default_branch}}
            # Development tag for develop branch
            type=raw,value=develop,enable=${{ github.ref == 'refs/heads/develop' }}
            # Custom version tag
            type=raw,value=${{ needs.version.outputs.version }},enable=true

      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          # Basic container tests
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.version.outputs.version }} --version || true
          
          # Security scan of built image
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v $PWD:/tmp/.cache/ aquasec/trivy:latest image \
            --exit-code 0 --no-progress --format table \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.version.outputs.version }}

      - name: Push Docker image
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Create Git tags for all successful builds
  tag:
    runs-on: ubuntu-latest
    needs: [version, build-and-test]
    if: github.event_name == 'push' && needs.build-and-test.result == 'success'
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push Git tag
        run: |
          TAG_NAME="${{ needs.version.outputs.tag }}"
          BRANCH_NAME="${{ github.ref_name }}"
          
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Create different tag types based on branch
          case "$BRANCH_NAME" in
            "master")
              # master branch tags are handled by semantic-release
              echo "master branch tagging handled by semantic-release"
              ;;
            "develop")
              git tag -a "dev-${TAG_NAME}" -m "Development build ${TAG_NAME}"
              git push origin "dev-${TAG_NAME}"
              echo "Created development tag: dev-${TAG_NAME}"
              ;;
            release/*)
              RELEASE_VERSION=${BRANCH_NAME#release/}
              git tag -a "rc-${RELEASE_VERSION}-${TAG_NAME}" -m "Release candidate ${RELEASE_VERSION}"
              git push origin "rc-${RELEASE_VERSION}-${TAG_NAME}"
              echo "Created release candidate tag: rc-${RELEASE_VERSION}-${TAG_NAME}"
              ;;
            hotfix/*)
              HOTFIX_VERSION=${BRANCH_NAME#hotfix/}
              git tag -a "hotfix-${HOTFIX_VERSION}-${TAG_NAME}" -m "Hotfix ${HOTFIX_VERSION}"
              git push origin "hotfix-${HOTFIX_VERSION}-${TAG_NAME}"
              echo "Created hotfix tag: hotfix-${HOTFIX_VERSION}-${TAG_NAME}"
              ;;
            feature/*)
              # Only create tags for feature branches if explicitly enabled
              if [ "${{ github.event.head_commit.message }}" == *"[create-tag]"* ]; then
                FEATURE_NAME=${BRANCH_NAME#feature/}
                git tag -a "feat-${FEATURE_NAME}-${TAG_NAME}" -m "Feature ${FEATURE_NAME} snapshot"
                git push origin "feat-${FEATURE_NAME}-${TAG_NAME}"
                echo "Created feature tag: feat-${FEATURE_NAME}-${TAG_NAME}"
              fi
              ;;
            *)
              echo "No tagging strategy defined for branch: $BRANCH_NAME"
              ;;
          esac

  # Create release and update changelog
  release:
    runs-on: ubuntu-latest
    needs: [version, build-and-test, tag]
    if: needs.version.outputs.should_release == 'true' && github.ref == 'refs/heads/master'
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github conventional-changelog-conventionalcommits

      - name: Configure semantic-release
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["master"],
            "plugins": [
              [
                "@semantic-release/commit-analyzer",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/release-notes-generator",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/changelog",
                {
                  "changelogFile": "CHANGELOG.md"
                }
              ],
              [
                "@semantic-release/git",
                {
                  "assets": ["CHANGELOG.md"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ],
              [
                "@semantic-release/github",
                {
                  "assets": [
                    {
                      "path": "CHANGELOG.md",
                      "name": "CHANGELOG.md",
                      "label": "Changelog"
                    }
                  ]
                }
              ]
            ]
          }
          EOF

      - name: Create release
        run: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Docker image tags for release
        if: success()
        run: |
          echo "Release created successfully"
          echo "Docker images available at: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"

  # Notify on completion
  notify:
    runs-on: ubuntu-latest
    needs: [version, build-and-test, tag, release]
    if: always()
    steps:
      - name: Workflow summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Git Tag:** ${{ needs.version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.build-and-test.result }}" = "success" ]; then
            echo "✅ **Build Status:** Success" >> $GITHUB_STEP_SUMMARY
            echo "**Image Tags:** ${{ needs.build-and-test.outputs.image-tags }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build Status:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.tag.result }}" = "success" ]; then
            echo "🏷️ **Git Tag:** Created successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.tag.result }}" = "skipped" ]; then
            echo "ℹ️ **Git Tag:** Skipped (pull request or failed build)" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Git Tag:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.release.result }}" = "success" ]; then
            echo "🎉 **Release:** Created successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.version.outputs.should_release }}" = "true" ]; then
            echo "⚠️ **Release:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Release:** Not applicable for this branch/event" >> $GITHUB_STEP_SUMMARY
          fi 